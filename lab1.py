# -*- coding: utf-8 -*-
"""Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O3g8o8F-AQPoa9drfuzpY8VjfYOz-raJ

**Нейронные сети глубокого обучения**

Лабораторная #1

1) Загрузка пакетов
"""

import torch
import torchvision
import torchvision.transforms as transforms

import matplotlib.pyplot as plt
import numpy as np

import torch.nn as nn
import torch.nn.functional as F

import torch.optim as optim

import matplotlib.pyplot as plt
import numpy as np

print('PyTorch version:', torch.__version__)

"""2) Загрузка и преобразование исходных данных из диапазона [0,1] в [-1,1]"""

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=4,
                                         shuffle=False, num_workers=2)

classes = ('самолет', 'машина', 'птица', 'кот',
           'олень', 'собака', 'лягушка', 'конь', 'корабль', 'грузовик')

"""3) Первая проверка"""

def imshow(img):
    img = img / 2 + 0.5   
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))


# тренировка на рандомном изображении 
dataiter = iter(trainloader)
images, labels = dataiter.next()

# вывод изображения
imshow(torchvision.utils.make_grid(images))
print(' '.join('%5s' % classes[labels[j]] for j in range(4)))

"""4) Сама сверточная нейросеть"""

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16 * 5 * 5)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x


net = Net()
print ( net )

"""5) Задаем функцию потери и оптимизатор"""

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)

"""GPU"""

print('\n===> Training Start')

device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
net.to(device)
if torch.cuda.device_count() > 1:
    print('\n===> Training on GPU!')
    net = nn.DataParallel(net)

"""6) Тренировка сеть"""

# проходим в цикле по набору данных несколько раз
for epoch in range(2):  

    running_loss = 0.0
    for i, data in enumerate(trainloader, 0):
        # получаем вводные данные
        inputs, labels = data

        # обнуляем параметр gradients
        optimizer.zero_grad()

        # forward + backward + optimize
        outputs = net(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        # печатаем статистику
        running_loss += loss.item()
        if i % 2000 == 1999:    # печатаем каждые 2000 мини-пакетов
            print('[%d, %5d] loss: %.3f' %
                  (epoch + 1, i + 1, running_loss / 2000))
            running_loss = 0.0

print('Тренировка завершена')

"""7) Сохранени обученной модели"""

PATH = './cifar_net.pth'
torch.save(net.state_dict(), PATH)

"""8) Тестируем сеть с помощью тестовых данных"""

dataiter = iter(testloader)
images, labels = dataiter.next()

imshow(torchvision.utils.make_grid(images))
print('GroundTruth: ', ' '.join('%5s' % classes[labels[j]] for j in range(4)))

correct = 0
total = 0
with torch.no_grad():
    for data in testloader:
        images, labels = data
        outputs = net(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print('Аккуратность сети на 10000 тестовых изображений: %d %%' % (
    100 * correct / total))

class_correct = list(0. for i in range(10))
class_total = list(0. for i in range(10))
with torch.no_grad():
    for data in testloader:
        images, labels = data
        outputs = net(images)
        _, predicted = torch.max(outputs, 1)
        c = (predicted == labels).squeeze()
        for i in range(4):
            label = labels[i]
            class_correct[label] += c[i].item()
            class_total[label] += 1


for i in range(10):
    print('Аккуратность %5s : %2d %%' % (
        classes[i], 100 * class_correct[i] / class_total[i]))

def train (epoch, model):
    CNN = model
    train_accuracy = 0
    train_loss = 0
    total = 0
    N_count = 0 
    for batch, (X, lable) in enumerate(trainloader, 0):
        X, lable = X.to(device), lable.to(device)

        N_count += X.size(0)
        optimizer.zero_grad()

        outputs = СNN(X)
        loss = criterion(output, labels)
        loss.backward()
        optimizer.step()

        train_loss += loss.item()
        _, predicted = torch.max(outputs, 1)
        total += labels.size(0)
        train_accuracy = accuracy_score(label.cpu().data.squeeze().numpy(), predicted.cpu().data.sqeeze().numpy())

        train_accuracy = []
        test_accuracy = []
        for epoch in range(2):
            train_acc, train_losses = train(epoch, CNN)
            test_losses, test_acc = test(epoch, CNN)
            train_accuracy.append(train_acc)
            train_loss.append(tarin_losses)
            test_accuracy.append(test_acc)
            test_loss.append(test_losses)

        fig, ax = plt.subplots()
        plt.title('Loss')
        plt.ylabel('Value of loss')
        plt.xlabel('Epochs')
        plt.plot(train_loss)
        plt.legend('Train')
        plt.plot(lest_loss)
        plt.legend('Test')
        fig.savefig('Loss.png')
        plt.show()
        #plt.close()